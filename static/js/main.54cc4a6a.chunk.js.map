{"version":3,"sources":["Todo.js","TodoList.js","Header.js","filters.js","TodosFilter.js","Footer.js","App.js","index.js"],"names":["Todo","todo","deleteTodo","changeTodoStatus","className","onChange","id","type","checked","completed","htmlFor","title","onClick","TodoList","props","selectAllButton","markAll","todos","hideOnStart","map","key","cn","Header","state","handleInput","event","value","target","setState","trimLeft","sumbmitForm","addTodos","preventDefault","reset","prev","onSubmit","this","placeholder","React","Component","FILTERS","TodosFilter","handlerChangeList","handleClearCompleted","href","name","Footer","todosList","filter","length","App","currentFilter","newTodo","todoId","checkCompleted","list","every","x","preparedTodo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.54cc4a6a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Todo = ({ todo, deleteTodo, changeTodoStatus }) => (\n  <>\n    <div className=\"view\">\n      <input\n        onChange={() => changeTodoStatus(todo.id)}\n        type=\"checkbox\"\n        className=\"toggle\"\n        id={todo.id}\n        checked={todo.completed}\n      />\n      <label htmlFor={todo.id}>{todo.title}</label>\n      <button\n        onClick={() => deleteTodo(todo.id)}\n        type=\"button\"\n        className=\"destroy\"\n      />\n    </div>\n    <input type=\"text\" className=\"edit\" />\n  </>\n);\n\nexport default Todo;\n\nTodo.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeTodoStatus: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport Todo from './Todo';\n\nconst TodoList = (props) => {\n  const { selectAllButton,\n    markAll,\n    todos,\n    deleteTodo,\n    changeTodoStatus,\n    hideOnStart } = props;\n\n  return (\n    <>\n      {hideOnStart && (\n        <form>\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onChange={() => markAll()}\n            checked={selectAllButton}\n          />\n          <label\n            htmlFor=\"toggle-all\"\n          >\n            Mark all as complete\n          </label>\n        </form>\n      )}\n\n      <ul className=\"todo-list\">\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className={cn({ completed: todo.completed })}\n          >\n            <Todo\n              todo={todo}\n              deleteTodo={deleteTodo}\n              changeTodoStatus={changeTodoStatus}\n\n            />\n          </li>\n        ))\n        }\n      </ul>\n    </>\n  );\n};\n\nexport default TodoList;\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeTodoStatus: PropTypes.func.isRequired,\n  markAll: PropTypes.func.isRequired,\n  selectAllButton: PropTypes.bool.isRequired,\n  hideOnStart: PropTypes.bool.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Header extends React.Component {\n  state= {\n    id: 1,\n    title: '',\n    completed: '',\n  }\n\n  handleInput = (event) => {\n    const { value } = event.target;\n\n    this.setState(state => ({\n      title: value.trimLeft(),\n      completed: false,\n    }));\n  }\n\n  sumbmitForm = (event) => {\n    const { addTodos } = this.props;\n\n    event.preventDefault();\n    if (this.state.title === '') {\n      return;\n    }\n\n    addTodos(this.state);\n    this.reset();\n  }\n\n  reset = () => {\n    this.setState(prev => ({\n      title: '',\n      completed: false,\n      id: prev.id + 1,\n    }));\n  }\n\n  render() {\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <form onSubmit={this.sumbmitForm}>\n          <input\n            onChange={this.handleInput}\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={this.state.title}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n\nHeader.propTypes = {\n  addTodos: PropTypes.func.isRequired,\n};\n","export const FILTERS = {\n  all: 'all',\n  active: 'active',\n  completed: 'completed',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FILTERS } from './filters';\n\nconst TodosFilter = ({ handlerChangeList, handleClearCompleted }) => (\n  <>\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className=\"selected\"\n          name=\"all\"\n          onClick={() => handlerChangeList(FILTERS.all)}\n        >\n          All\n        </a>\n\n      </li>\n\n      <li>\n        <a\n          name=\"active\"\n          href=\"#/active\"\n          onClick={() => handlerChangeList(FILTERS.active)}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          name=\"completed\"\n          href=\"#/completed\"\n          onClick={() => handlerChangeList(FILTERS.completed)}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n\n    <button\n      type=\"button\"\n      className=\"clear-completed\"\n      onClick={() => handleClearCompleted()}\n    >\n      Clear completed\n    </button>\n  </>\n);\n\nexport default TodosFilter;\n\nTodosFilter.propTypes = {\n  handlerChangeList: PropTypes.func.isRequired,\n  handleClearCompleted: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodosFilter from './TodosFilter';\n\nconst Footer = ({ todosList, handleClearCompleted, handlerChangeList }) => (\n  <>\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {`${todosList.filter(todo => !todo.completed).length} items left`}\n\n      </span>\n      <TodosFilter\n        handlerChangeList={handlerChangeList}\n        handleClearCompleted={handleClearCompleted}\n      />\n    </footer>\n\n  </>\n);\n\nexport default Footer;\n\nFooter.propTypes = {\n  todosList: PropTypes.arrayOf(PropTypes.object).isRequired,\n  handlerChangeList: PropTypes.func.isRequired,\n  handleClearCompleted: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport TodoList from './TodoList';\nimport Header from './Header';\nimport { FILTERS } from './filters';\nimport Footer from './Footer';\n\nclass App extends React.Component {\n  state= {\n    todosList: [],\n    currentFilter: FILTERS.all,\n  }\n\n  addTodos = (newTodo) => {\n    this.setState(prev => (\n      { todosList: [...prev.todosList, newTodo] }\n    ));\n  }\n\n  deleteTodo = (todoId) => {\n    this.setState(({ todosList }) => ({\n      todosList: todosList.filter(({ id }) => id !== todoId),\n    }));\n  }\n\n  checkCompleted = list => list.every(x => x.completed === true)\n\n  markAll = () => {\n    this.setState(state => ({\n      todosList: state.todosList.map((todo) => {\n        if (this.checkCompleted(state.todosList)) {\n          return {\n            ...todo,\n            completed: false,\n          };\n        }\n\n        return {\n          ...todo,\n          completed: true,\n        };\n      }),\n    }));\n  }\n\n  handleClearCompleted = () => {\n    this.setState(({ todosList }) => ({\n      todosList: todosList.filter(({ completed }) => !completed),\n    }));\n  }\n\n  changeTodoStatus = (todoId) => {\n    this.setState(state => ({\n      todosList: state.todosList.map((todo) => {\n        if (todo.id !== todoId) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }),\n    }));\n  }\n\n  handlerChangeList = (name) => {\n    this.setState({\n      currentFilter: name,\n    });\n  }\n\n  render() {\n    const { todosList, currentFilter } = this.state;\n\n    let preparedTodo = todosList;\n    let selectAllButton;\n    let hideOnStart;\n\n    todosList.length > 0 ? hideOnStart = true : hideOnStart = false;\n\n    if (this.checkCompleted(todosList) && todosList.length > 0) {\n      selectAllButton = true;\n    } else {\n      selectAllButton = false;\n    }\n\n    if (currentFilter === FILTERS.active) {\n      preparedTodo = preparedTodo.filter(todo => !todo.completed);\n    }\n\n    if (currentFilter === FILTERS.completed) {\n      preparedTodo = preparedTodo.filter(todo => todo.completed);\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <Header addTodos={this.addTodos} />\n\n        <section className=\"main\">\n\n          <TodoList\n            todos={preparedTodo}\n            deleteTodo={this.deleteTodo}\n            changeTodoStatus={this.changeTodoStatus}\n            markAll={this.markAll}\n            selectAllButton={selectAllButton}\n            hideOnStart={hideOnStart}\n          />\n        </section>\n        {hideOnStart && (\n          <Footer\n            todosList={todosList}\n            handlerChangeList={this.handlerChangeList}\n            handleClearCompleted={this.handleClearCompleted}\n          />\n        )}\n\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}