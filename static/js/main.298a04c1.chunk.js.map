{"version":3,"sources":["Todo.js","TodoList.js","Header.js","filters.js","TodosFilter.js","Footer.js","App.js","index.js"],"names":["Todo","state","newTitle","edit","activateEditing","setState","props","todo","title","handlerChange","target","value","trimLeft","replace","completeEdit","escapeEditing","e","keyCode","this","id","completed","changeTodoStatus","deleteTodo","editTodo","className","cn","editing","onChange","onBlur","onKeyDown","autoFocus","type","checked","onDoubleClick","onClick","React","Component","TodoList","selectAllButton","markAllTodo","todos","hideOnStart","htmlFor","map","key","Header","handleInput","event","sumbmitForm","addTodo","preventDefault","reset","prev","onSubmit","placeholder","FILTERS","TodosFilter","changeVisibleList","clearCompletedTodo","currentFilter","hideClearButton","href","Footer","todosList","filter","length","App","newTodo","todoId","checkCompletedAll","list","every","filterName","preparedTodos","some","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.298a04c1.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nclass Todo extends React.Component {\n  state = {\n    newTitle: '',\n    edit: false,\n  }\n\n  activateEditing =() => {\n    this.setState(state => ({\n      newTitle: this.props.todo.title,\n      edit: !state.edit,\n    }));\n  }\n\n  handlerChange =({ target }) => {\n    this.setState({\n      newTitle: target.value.trimLeft().replace(/(\\s{2,})/, ' '),\n    });\n  }\n\n  completeEdit = () => {\n    this.setState(state => ({\n      edit: false,\n    }));\n  }\n\n  escapeEditing = (e) => {\n    if (e.keyCode === 13 || e.keyCode === 27) {\n      this.setState({\n        edit: false,\n      });\n    }\n  }\n\n  render() {\n    const { todo: { id, completed, title },\n      changeTodoStatus,\n      deleteTodo,\n      editTodo } = this.props;\n\n    const { newTitle, edit } = this.state;\n\n    return (\n      <li\n        className={cn({\n          editing: edit, completed,\n        })}\n      >\n        {edit\n          ? (\n            <>\n              <input\n                onChange={this.handlerChange}\n                onBlur={this.completeEdit}\n                className=\"edit\"\n                value={newTitle}\n                onKeyDown={e => editTodo(e, id, newTitle, this.escapeEditing)}\n                // лінтер свариться на autoFocus;\n                // eslint-disable-next-line jsx-a11y/no-autofocus\n                autoFocus\n              />\n            </>\n          )\n\n          : (\n            <div className=\"view\">\n              <input\n                onChange={() => changeTodoStatus(id)}\n                type=\"checkbox\"\n                className=\"toggle\"\n                id={id}\n                checked={completed}\n              />\n              <label\n                onDoubleClick={this.activateEditing}\n              >\n                {title}\n              </label>\n              <button\n                onClick={() => deleteTodo(id)}\n                type=\"button\"\n                className=\"destroy\"\n              />\n            </div>\n          )}\n      </li>\n    );\n  }\n}\n\nexport default Todo;\n\nTodo.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeTodoStatus: PropTypes.func.isRequired,\n  editTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Todo from './Todo';\n\nconst TodoList = (props) => {\n  const { selectAllButton,\n    markAllTodo,\n    todos,\n    deleteTodo,\n    editTodo,\n    changeTodoStatus,\n    hideOnStart } = props;\n\n  return (\n    <>\n      {hideOnStart && (\n        <form>\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onChange={() => markAllTodo()}\n            checked={selectAllButton}\n          />\n          <label\n            htmlFor=\"toggle-all\"\n          >\n            Mark all as complete\n          </label>\n        </form>\n      )}\n\n      <ul className=\"todo-list\">\n        {todos.map(todo => (\n          <Todo\n            key={todo.id}\n            todo={todo}\n            deleteTodo={deleteTodo}\n            changeTodoStatus={changeTodoStatus}\n            editTodo={editTodo}\n          />\n        ))\n        }\n      </ul>\n    </>\n  );\n};\n\nexport default TodoList;\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeTodoStatus: PropTypes.func.isRequired,\n  markAllTodo: PropTypes.func.isRequired,\n  selectAllButton: PropTypes.bool.isRequired,\n  hideOnStart: PropTypes.bool.isRequired,\n  editTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Header extends React.Component {\n  state= {\n    id: 1,\n    title: '',\n    completed: '',\n  }\n\n  handleInput = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      title: value.trimLeft().replace(/(\\s{2,})/, ' '),\n      completed: false,\n    });\n  }\n\n  sumbmitForm = (event) => {\n    const { addTodo } = this.props;\n    const { id, title, completed } = this.state;\n\n    event.preventDefault();\n    if (this.state.title === '') {\n      return;\n    }\n\n    addTodo({\n      id,\n      title,\n      completed,\n    });\n    this.reset();\n  }\n\n  reset = () => {\n    this.setState(prev => ({\n      title: '',\n      completed: false,\n      id: prev.id + 1,\n    }));\n  }\n\n  render() {\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <form onSubmit={this.sumbmitForm}>\n          <input\n            onChange={this.handleInput}\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={this.state.title}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n\nHeader.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n","export const FILTERS = {\n  all: 'all',\n  active: 'active',\n  completed: 'completed',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FILTERS } from './filters';\n\nconst TodosFilter = (props) => {\n  const { changeVisibleList,\n    clearCompletedTodo,\n    currentFilter,\n    hideClearButton } = props;\n\n  return (\n\n    <>\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            className={currentFilter === FILTERS.all && 'selected'}\n            onClick={() => changeVisibleList(FILTERS.all)}\n          >\n            All\n          </a>\n\n        </li>\n\n        <li>\n          <a\n            className={currentFilter === FILTERS.active ? 'selected' : ''}\n            href=\"#/active\"\n            onClick={() => changeVisibleList(FILTERS.active)}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            className={currentFilter === FILTERS.completed ? 'selected' : ''}\n            href=\"#/completed\"\n            onClick={() => changeVisibleList(FILTERS.completed)}\n          >\n            Completed\n          </a>\n        </li>\n\n      </ul>\n      {hideClearButton && (\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={() => clearCompletedTodo()}\n        >\n          Clear completed\n        </button>\n      )}\n\n    </>\n  );\n};\n\nexport default TodosFilter;\n\nTodosFilter.propTypes = {\n  changeVisibleList: PropTypes.func.isRequired,\n  clearCompletedTodo: PropTypes.func.isRequired,\n  currentFilter: PropTypes.string.isRequired,\n  hideClearButton: PropTypes.bool.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodosFilter from './TodosFilter';\n\nconst Footer = (props) => {\n  const { todosList,\n    clearCompletedTodo,\n    changeVisibleList,\n    currentFilter,\n    hideClearButton } = props;\n\n  return (\n    <>\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {`${todosList.filter(todo => !todo.completed).length} items left`}\n\n        </span>\n        <TodosFilter\n          currentFilter={currentFilter}\n          changeVisibleList={changeVisibleList}\n          clearCompletedTodo={clearCompletedTodo}\n          hideClearButton={hideClearButton}\n        />\n      </footer>\n\n    </>\n  );\n};\n\nexport default Footer;\n\nFooter.propTypes = {\n  todosList: PropTypes.arrayOf(PropTypes.object).isRequired,\n  changeVisibleList: PropTypes.func.isRequired,\n  clearCompletedTodo: PropTypes.func.isRequired,\n  currentFilter: PropTypes.string.isRequired,\n  hideClearButton: PropTypes.bool.isRequired,\n};\n","import React from 'react';\nimport TodoList from './TodoList';\nimport Header from './Header';\nimport { FILTERS } from './filters';\nimport Footer from './Footer';\n\nclass App extends React.Component {\n  state= {\n    todosList: [],\n    currentFilter: FILTERS.all,\n  }\n\n  addTodo = (newTodo) => {\n    this.setState(({ todosList }) => (\n      { todosList: [...todosList, newTodo] }\n    ));\n  }\n\n  editTodo = (target, todoId, newTitle, escapeEditing) => {\n    if (target.keyCode === 13) {\n      this.setState(({ todosList }) => ({\n        todosList: todosList.map((todo) => {\n          if (todo.id === todoId) {\n            return {\n              ...todo, title: newTitle,\n            };\n          }\n\n          return todo;\n        }),\n      }));\n\n      if (newTitle === '') {\n        return;\n      }\n    }\n\n    escapeEditing(target);\n  }\n\n  deleteTodo = (todoId) => {\n    this.setState(({ todosList }) => ({\n      todosList: todosList.filter(({ id }) => id !== todoId),\n    }));\n  }\n\n  checkCompletedAll = list => list.every(todo => todo.completed === true)\n\n  markAllTodo = () => {\n    this.setState(({ todosList }) => ({\n      todosList: todosList.map((todo) => {\n        if (!this.checkCompletedAll(todosList)) {\n          return {\n            ...todo,\n            completed: true,\n          };\n        }\n\n        return {\n          ...todo,\n          completed: false,\n        };\n      }),\n    }));\n  }\n\n  clearCompletedTodo = () => {\n    this.setState(({ todosList }) => ({\n      todosList: todosList.filter(({ completed }) => !completed),\n    }));\n  }\n\n  changeTodoStatus = (todoId) => {\n    this.setState(({ todosList }) => ({\n      todosList: todosList.map((todo) => {\n        if (todo.id !== todoId) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }),\n    }));\n  }\n\n  changeVisibleList = (filterName) => {\n    this.setState({\n      currentFilter: filterName,\n    });\n  }\n\n  render() {\n    const { todosList, currentFilter } = this.state;\n\n    let preparedTodos = todosList;\n    let selectAllButton;\n    let hideOnStart;\n    const hideClearButton = preparedTodos.some(todo => todo.completed === true);\n\n    preparedTodos.length > 0 ? hideOnStart = true : hideOnStart = false;\n\n    if (this.checkCompletedAll(preparedTodos) && todosList.length > 0) {\n      selectAllButton = true;\n    } else {\n      selectAllButton = false;\n    }\n\n    if (currentFilter === FILTERS.active) {\n      preparedTodos = preparedTodos.filter(todo => !todo.completed);\n    }\n\n    if (currentFilter === FILTERS.completed) {\n      preparedTodos = preparedTodos.filter(todo => todo.completed);\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <Header addTodo={this.addTodo} />\n\n        <section className=\"main\">\n\n          <TodoList\n            todos={preparedTodos}\n            deleteTodo={this.deleteTodo}\n            editTodo={this.editTodo}\n            changeTodoStatus={this.changeTodoStatus}\n            markAllTodo={this.markAllTodo}\n            selectAllButton={selectAllButton}\n            hideOnStart={hideOnStart}\n          />\n        </section>\n        {hideOnStart && (\n          <Footer\n            todosList={todosList}\n            hideClearButton={hideClearButton}\n            currentFilter={currentFilter}\n            changeVisibleList={this.changeVisibleList}\n            clearCompletedTodo={this.clearCompletedTodo}\n          />\n        )}\n\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}