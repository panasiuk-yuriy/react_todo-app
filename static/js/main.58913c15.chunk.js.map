{"version":3,"sources":["Todo.js","TodoList.js","Header.js","filters.js","TodosFilter.js","Footer.js","App.js","index.js"],"names":["Todo","state","title","edit","activateEditing","setState","props","todo","handlerChange","target","value","CompleteEdit","this","changeTodoStatus","deleteTodo","submitEditingTodo","className","cn","editing","completed","onSubmit","id","onChange","onBlur","onFocus","type","checked","htmlFor","onDoubleClick","onClick","React","Component","TodoList","selectAllButton","markAll","todos","hideOnStart","map","key","Header","handleInput","event","trimLeft","sumbmitForm","addTodos","preventDefault","reset","prev","placeholder","FILTERS","TodosFilter","handlerChangeList","handleClearCompleted","currentFilter","hideClearButton","href","name","Footer","todosList","filter","length","App","newTodo","todoId","todoTitle","checkCompleted","list","every","x","preparedTodo","some","ReactDOM","render","document","getElementById"],"mappings":"wTAsFeA,E,4MAjFbC,MAAQ,CACNC,MAAO,GACPC,MAAM,G,EAGRC,gBAAiB,WACf,EAAKC,UAAS,SAAAJ,GAAK,MAAK,CACtBC,MAAO,EAAKI,MAAMC,KAAKL,MACvBC,MAAOF,EAAME,U,EAIjBK,cAAe,YAAiB,IAAdC,EAAa,EAAbA,OAChB,EAAKJ,SAAS,CACZH,MAAOO,EAAOC,S,EAIlBC,aAAe,WACb,EAAKN,UAAS,SAAAJ,GAAK,MAAK,CACtBE,MAAM,O,uDAIA,IAAD,EAIiBS,KAAKN,MAHrBC,EADD,EACCA,KACNM,EAFK,EAELA,iBACAC,EAHK,EAGLA,WACAC,EAJK,EAILA,kBAJK,EAMiBH,KAAKX,MAArBC,EAND,EAMCA,MAAOC,EANR,EAMQA,KAEf,OACE,wBACEa,UAAWC,IAAG,CACZC,QAASf,EAAMgB,UAAWZ,EAAKY,aAGhChB,EAEG,oCACE,0BAAMiB,SAAU,kBAAML,EAAkBR,EAAKc,GAAInB,KAC/C,2BACEoB,SAAUV,KAAKJ,cACfe,OAAQX,KAAKD,aACbU,GAAId,EAAKc,GACTL,UAAU,OACVN,MAAOR,EACPsB,SAAO,MAOb,yBAAKR,UAAU,QACb,2BACEM,SAAU,kBAAMT,EAAiBN,EAAKc,KACtCI,KAAK,WACLT,UAAU,SACVK,GAAId,EAAKc,GACTK,QAASnB,EAAKY,YAEhB,2BACEQ,QAASpB,EAAKc,GACdO,cAAehB,KAAKR,iBAEnBG,EAAKL,OAER,4BACE2B,QAAS,kBAAMf,EAAWP,EAAKc,KAC/BI,KAAK,SACLT,UAAU,kB,GAzEPc,IAAMC,WC6CVC,EA5CE,SAAC1B,GAAW,IACnB2B,EAMU3B,EANV2B,gBACNC,EAKgB5B,EALhB4B,QACAC,EAIgB7B,EAJhB6B,MACArB,EAGgBR,EAHhBQ,WACAC,EAEgBT,EAFhBS,kBACAF,EACgBP,EADhBO,iBACAuB,EAAgB9B,EAAhB8B,YAEF,OACE,oCACGA,GACC,8BACE,2BACEX,KAAK,WACLJ,GAAG,aACHL,UAAU,aACVM,SAAU,kBAAMY,KAChBR,QAASO,IAEX,2BACEN,QAAQ,cADV,yBAQJ,wBAAIX,UAAU,aACXmB,EAAME,KAAI,SAAA9B,GAAI,OACb,kBAAC,EAAD,CACE+B,IAAK/B,EAAKc,GACVd,KAAMA,EACNO,WAAYA,EACZD,iBAAkBA,EAClBE,kBAAmBA,UCgBhBwB,E,4MApDbtC,MAAO,CACLoB,GAAI,EACJnB,MAAO,GACPiB,UAAW,I,EAGbqB,YAAc,SAACC,GAAW,IAChB/B,EAAU+B,EAAMhC,OAAhBC,MAER,EAAKL,UAAS,SAAAJ,GAAK,MAAK,CACtBC,MAAOQ,EAAMgC,WACbvB,WAAW,O,EAIfwB,YAAc,SAACF,GAAW,IAChBG,EAAa,EAAKtC,MAAlBsC,SAERH,EAAMI,iBACmB,KAArB,EAAK5C,MAAMC,QAIf0C,EAAS,EAAK3C,OACd,EAAK6C,U,EAGPA,MAAQ,WACN,EAAKzC,UAAS,SAAA0C,GAAI,MAAK,CACrB7C,MAAO,GACPiB,WAAW,EACXE,GAAI0B,EAAK1B,GAAK,O,uDAKhB,OACE,4BAAQL,UAAU,UAChB,qCACA,0BAAMI,SAAUR,KAAK+B,aACnB,2BACErB,SAAUV,KAAK4B,YACfxB,UAAU,WACVgC,YAAY,yBACZtC,MAAOE,KAAKX,MAAMC,c,GA7CT4B,IAAMC,WCHdkB,EACN,MADMA,EAEH,SAFGA,EAGA,YCgEEC,EA/DK,SAAC5C,GAAW,IACtB6C,EAIc7C,EAJd6C,kBACNC,EAGoB9C,EAHpB8C,qBACAC,EAEoB/C,EAFpB+C,cACAC,EACoBhD,EADpBgD,gBACArB,EAAoB3B,EAApB2B,gBAEF,OAEE,oCACE,wBAAIjB,UAAU,WACZ,4BACE,uBACEuC,KAAK,KACLvC,UAAWqC,IAAkBJ,GAAe,WAC5CO,KAAK,MACL3B,QAAS,kBAAMsB,EAAkBF,KAJnC,SAUAhB,GACA,4BACE,uBACEjB,UAAWqC,IAAkBJ,GAAkB,WAC/CO,KAAK,SACLD,KAAK,WACL1B,QAAS,kBAAMsB,EAAkBF,KAJnC,WAWFK,GACA,4BACE,uBACEtC,UAAWqC,IAAkBJ,GAAqB,WAClDO,KAAK,YACLD,KAAK,cACL1B,QAAS,kBAAMsB,EAAkBF,KAJnC,eAYLK,GACC,4BACE7B,KAAK,SACLT,UAAU,kBACVa,QAAS,kBAAMuB,MAHjB,qBCtBOK,EA5BA,SAACnD,GAAW,IACjBoD,EAKcpD,EALdoD,UACNN,EAIoB9C,EAJpB8C,qBACAD,EAGoB7C,EAHpB6C,kBACAE,EAEoB/C,EAFpB+C,cACAC,EACoBhD,EADpBgD,gBACArB,EAAoB3B,EAApB2B,gBAEF,OACE,oCACE,4BAAQjB,UAAU,UAChB,0BAAMA,UAAU,cAAhB,UACM0C,EAAUC,QAAO,SAAApD,GAAI,OAAKA,EAAKY,aAAWyC,OADhD,gBAIA,kBAAC,EAAD,CACEP,cAAeA,EACfF,kBAAmBA,EACnBC,qBAAsBA,EACtBE,gBAAiBA,EACjBrB,gBAAiBA,OCqHZ4B,E,4MAtIb5D,MAAO,CACLyD,UAAW,GACXL,cAAeJ,G,EAGjBL,SAAW,SAACkB,GACV,EAAKzD,UAAS,SAAA0C,GAAI,MAChB,CAAEW,UAAU,GAAD,mBAAMX,EAAKW,WAAX,CAAsBI,S,EAIrC/C,kBAAoB,SAACgD,EAAQC,GAC3B,EAAK3D,UAAS,kBAAoB,CAChCqD,UADY,EAAGA,UACMrB,KAAI,SAAC9B,GACxB,OAAIA,EAAKc,KAAO0C,EACP,2BACFxD,GADL,IACWL,MAAO8D,IAIbzD,U,EAKbO,WAAa,SAACiD,GACZ,EAAK1D,UAAS,kBAAoB,CAChCqD,UADY,EAAGA,UACMC,QAAO,qBAAGtC,KAAgB0C,U,EAInDE,eAAiB,SAAAC,GAAI,OAAIA,EAAKC,OAAM,SAAAC,GAAC,OAAoB,IAAhBA,EAAEjD,c,EAE3Ce,QAAU,WACR,EAAK7B,UAAS,SAAAJ,GAAK,MAAK,CACtByD,UAAWzD,EAAMyD,UAAUrB,KAAI,SAAC9B,GAC9B,OAAI,EAAK0D,eAAehE,EAAMyD,WACrB,2BACFnD,GADL,IAEEY,WAAW,IAIR,2BACFZ,GADL,IAEEY,WAAW,Y,EAMnBiC,qBAAuB,WACrB,EAAK/C,UAAS,kBAAoB,CAChCqD,UADY,EAAGA,UACMC,QAAO,qBAAGxC,kB,EAInCN,iBAAmB,SAACkD,GAClB,EAAK1D,UAAS,SAAAJ,GAAK,MAAK,CACtByD,UAAWzD,EAAMyD,UAAUrB,KAAI,SAAC9B,GAC9B,OAAIA,EAAKc,KAAO0C,EACPxD,EAGF,2BACFA,GADL,IAEEY,WAAYZ,EAAKY,oB,EAMzBgC,kBAAoB,SAACK,GACnB,EAAKnD,SAAS,CACZgD,cAAeG,K,uDAIT,IAIJvB,EACAG,EALG,EAC8BxB,KAAKX,MAAlCyD,EADD,EACCA,UAAWL,EADZ,EACYA,cAEfgB,EAAeX,EAGbJ,EAAkBI,EAAUY,MAAK,SAAA/D,GAAI,OAAuB,IAAnBA,EAAKY,aAkBpD,OAhBuBiB,EAAvBsB,EAAUE,OAAS,EAGjB3B,KADErB,KAAKqD,eAAeP,IAAcA,EAAUE,OAAS,GAMrDP,IAAkBJ,IACpBoB,EAAeA,EAAaV,QAAO,SAAApD,GAAI,OAAKA,EAAKY,cAG/CkC,IAAkBJ,IACpBoB,EAAeA,EAAaV,QAAO,SAAApD,GAAI,OAAIA,EAAKY,cAIhD,6BAASH,UAAU,WACjB,kBAAC,EAAD,CAAQ4B,SAAUhC,KAAKgC,WAEvB,6BAAS5B,UAAU,QAEjB,kBAAC,EAAD,CACEmB,MAAOkC,EACPvD,WAAYF,KAAKE,WACjBC,kBAAmBH,KAAKG,kBACxBF,iBAAkBD,KAAKC,iBACvBqB,QAAStB,KAAKsB,QACdD,gBAAiBA,EACjBG,YAAaA,KAGhBA,GACC,kBAAC,EAAD,CACEsB,UAAWA,EACXJ,gBAAiBA,EACjBrB,gBAAiBA,EACjBoB,cAAeA,EACfF,kBAAmBvC,KAAKuC,kBACxBC,qBAAsBxC,KAAKwC,4B,GA9HrBtB,IAAMC,WCAxBwC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.58913c15.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nclass Todo extends React.Component {\n  state = {\n    title: '',\n    edit: false,\n  }\n\n  activateEditing =() => {\n    this.setState(state => ({\n      title: this.props.todo.title,\n      edit: !state.edit,\n    }));\n  }\n\n  handlerChange =({ target }) => {\n    this.setState({\n      title: target.value,\n    });\n  }\n\n  CompleteEdit = () => {\n    this.setState(state => ({\n      edit: false,\n    }));\n  }\n\n  render() {\n    const { todo,\n      changeTodoStatus,\n      deleteTodo,\n      submitEditingTodo } = this.props;\n\n    const { title, edit } = this.state;\n\n    return (\n      <li\n        className={cn({\n          editing: edit, completed: todo.completed,\n        })}\n      >\n        {edit\n          ? (\n            <>\n              <form onSubmit={() => submitEditingTodo(todo.id, title)}>\n                <input\n                  onChange={this.handlerChange}\n                  onBlur={this.CompleteEdit}\n                  id={todo.id}\n                  className=\"edit\"\n                  value={title}\n                  onFocus\n                />\n              </form>\n            </>\n          )\n\n          : (\n            <div className=\"view\">\n              <input\n                onChange={() => changeTodoStatus(todo.id)}\n                type=\"checkbox\"\n                className=\"toggle\"\n                id={todo.id}\n                checked={todo.completed}\n              />\n              <label\n                htmlFor={todo.id}\n                onDoubleClick={this.activateEditing}\n              >\n                {todo.title}\n              </label>\n              <button\n                onClick={() => deleteTodo(todo.id)}\n                type=\"button\"\n                className=\"destroy\"\n              />\n            </div>\n          )}\n      </li>\n    );\n  }\n}\n\nexport default Todo;\n\nTodo.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeTodoStatus: PropTypes.func.isRequired,\n  submitEditingTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Todo from './Todo';\n\nconst TodoList = (props) => {\n  const { selectAllButton,\n    markAll,\n    todos,\n    deleteTodo,\n    submitEditingTodo,\n    changeTodoStatus,\n    hideOnStart } = props;\n\n  return (\n    <>\n      {hideOnStart && (\n        <form>\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onChange={() => markAll()}\n            checked={selectAllButton}\n          />\n          <label\n            htmlFor=\"toggle-all\"\n          >\n            Mark all as complete\n          </label>\n        </form>\n      )}\n\n      <ul className=\"todo-list\">\n        {todos.map(todo => (\n          <Todo\n            key={todo.id}\n            todo={todo}\n            deleteTodo={deleteTodo}\n            changeTodoStatus={changeTodoStatus}\n            submitEditingTodo={submitEditingTodo}\n          />\n        ))\n        }\n      </ul>\n    </>\n  );\n};\n\nexport default TodoList;\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeTodoStatus: PropTypes.func.isRequired,\n  markAll: PropTypes.func.isRequired,\n  submitEditingTodo: PropTypes.func.isRequired,\n  selectAllButton: PropTypes.bool.isRequired,\n  hideOnStart: PropTypes.bool.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Header extends React.Component {\n  state= {\n    id: 1,\n    title: '',\n    completed: '',\n  }\n\n  handleInput = (event) => {\n    const { value } = event.target;\n\n    this.setState(state => ({\n      title: value.trimLeft(),\n      completed: false,\n    }));\n  }\n\n  sumbmitForm = (event) => {\n    const { addTodos } = this.props;\n\n    event.preventDefault();\n    if (this.state.title === '') {\n      return;\n    }\n\n    addTodos(this.state);\n    this.reset();\n  }\n\n  reset = () => {\n    this.setState(prev => ({\n      title: '',\n      completed: false,\n      id: prev.id + 1,\n    }));\n  }\n\n  render() {\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <form onSubmit={this.sumbmitForm}>\n          <input\n            onChange={this.handleInput}\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={this.state.title}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n\nHeader.propTypes = {\n  addTodos: PropTypes.func.isRequired,\n};\n","export const FILTERS = {\n  all: 'all',\n  active: 'active',\n  completed: 'completed',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FILTERS } from './filters';\n\nconst TodosFilter = (props) => {\n  const { handlerChangeList,\n    handleClearCompleted,\n    currentFilter,\n    hideClearButton,\n    selectAllButton } = props;\n\n  return (\n\n    <>\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            className={currentFilter === FILTERS.all && 'selected'}\n            name=\"all\"\n            onClick={() => handlerChangeList(FILTERS.all)}\n          >\n            All\n          </a>\n\n        </li>\n        {!selectAllButton && (\n          <li>\n            <a\n              className={currentFilter === FILTERS.active && 'selected'}\n              name=\"active\"\n              href=\"#/active\"\n              onClick={() => handlerChangeList(FILTERS.active)}\n            >\n              Active\n            </a>\n          </li>\n        )}\n\n        { hideClearButton && (\n          <li>\n            <a\n              className={currentFilter === FILTERS.completed && 'selected'}\n              name=\"completed\"\n              href=\"#/completed\"\n              onClick={() => handlerChangeList(FILTERS.completed)}\n            >\n              Completed\n            </a>\n          </li>\n        )}\n\n      </ul>\n      {hideClearButton && (\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={() => handleClearCompleted()}\n        >\n          Clear completed\n        </button>\n      )}\n\n    </>\n  );\n};\n\nexport default TodosFilter;\n\nTodosFilter.propTypes = {\n  handlerChangeList: PropTypes.func.isRequired,\n  handleClearCompleted: PropTypes.func.isRequired,\n  currentFilter: PropTypes.string.isRequired,\n  hideClearButton: PropTypes.bool.isRequired,\n  selectAllButton: PropTypes.bool.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodosFilter from './TodosFilter';\n\nconst Footer = (props) => {\n  const { todosList,\n    handleClearCompleted,\n    handlerChangeList,\n    currentFilter,\n    hideClearButton,\n    selectAllButton } = props;\n\n  return (\n    <>\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {`${todosList.filter(todo => !todo.completed).length} items left`}\n\n        </span>\n        <TodosFilter\n          currentFilter={currentFilter}\n          handlerChangeList={handlerChangeList}\n          handleClearCompleted={handleClearCompleted}\n          hideClearButton={hideClearButton}\n          selectAllButton={selectAllButton}\n        />\n      </footer>\n\n    </>\n  );\n};\n\nexport default Footer;\n\nFooter.propTypes = {\n  todosList: PropTypes.arrayOf(PropTypes.object).isRequired,\n  handlerChangeList: PropTypes.func.isRequired,\n  handleClearCompleted: PropTypes.func.isRequired,\n  currentFilter: PropTypes.string.isRequired,\n  hideClearButton: PropTypes.bool.isRequired,\n  selectAllButton: PropTypes.bool.isRequired,\n};\n","import React from 'react';\nimport TodoList from './TodoList';\nimport Header from './Header';\nimport { FILTERS } from './filters';\nimport Footer from './Footer';\n\nclass App extends React.Component {\n  state= {\n    todosList: [],\n    currentFilter: FILTERS.all,\n  }\n\n  addTodos = (newTodo) => {\n    this.setState(prev => (\n      { todosList: [...prev.todosList, newTodo] }\n    ));\n  }\n\n  submitEditingTodo = (todoId, todoTitle) => {\n    this.setState(({ todosList }) => ({\n      todosList: todosList.map((todo) => {\n        if (todo.id === todoId) {\n          return {\n            ...todo, title: todoTitle,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  deleteTodo = (todoId) => {\n    this.setState(({ todosList }) => ({\n      todosList: todosList.filter(({ id }) => id !== todoId),\n    }));\n  }\n\n  checkCompleted = list => list.every(x => x.completed === true)\n\n  markAll = () => {\n    this.setState(state => ({\n      todosList: state.todosList.map((todo) => {\n        if (this.checkCompleted(state.todosList)) {\n          return {\n            ...todo,\n            completed: false,\n          };\n        }\n\n        return {\n          ...todo,\n          completed: true,\n        };\n      }),\n    }));\n  }\n\n  handleClearCompleted = () => {\n    this.setState(({ todosList }) => ({\n      todosList: todosList.filter(({ completed }) => !completed),\n    }));\n  }\n\n  changeTodoStatus = (todoId) => {\n    this.setState(state => ({\n      todosList: state.todosList.map((todo) => {\n        if (todo.id !== todoId) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }),\n    }));\n  }\n\n  handlerChangeList = (name) => {\n    this.setState({\n      currentFilter: name,\n    });\n  }\n\n  render() {\n    const { todosList, currentFilter } = this.state;\n\n    let preparedTodo = todosList;\n    let selectAllButton;\n    let hideOnStart;\n    const hideClearButton = todosList.some(todo => todo.completed === true);\n\n    todosList.length > 0 ? hideOnStart = true : hideOnStart = false;\n\n    if (this.checkCompleted(todosList) && todosList.length > 0) {\n      selectAllButton = true;\n    } else {\n      selectAllButton = false;\n    }\n\n    if (currentFilter === FILTERS.active) {\n      preparedTodo = preparedTodo.filter(todo => !todo.completed);\n    }\n\n    if (currentFilter === FILTERS.completed) {\n      preparedTodo = preparedTodo.filter(todo => todo.completed);\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <Header addTodos={this.addTodos} />\n\n        <section className=\"main\">\n\n          <TodoList\n            todos={preparedTodo}\n            deleteTodo={this.deleteTodo}\n            submitEditingTodo={this.submitEditingTodo}\n            changeTodoStatus={this.changeTodoStatus}\n            markAll={this.markAll}\n            selectAllButton={selectAllButton}\n            hideOnStart={hideOnStart}\n          />\n        </section>\n        {hideOnStart && (\n          <Footer\n            todosList={todosList}\n            hideClearButton={hideClearButton}\n            selectAllButton={selectAllButton}\n            currentFilter={currentFilter}\n            handlerChangeList={this.handlerChangeList}\n            handleClearCompleted={this.handleClearCompleted}\n          />\n        )}\n\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}